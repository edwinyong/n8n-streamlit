import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime

# Page config
st.set_page_config(page_title="AI Report - Sales 2025", layout="wide")

# --- Report summary (from JSON input) ---
summary_lines = [
    "Sales in 2025 showed a strong start with a peak in February (181,249.13), followed by a steady decline to September (18,826.01).",
    "Highest sales months: February and March; lowest: September."
]

st.title("AI Report: Monthly Sales — 2025")
st.markdown("\n".join([f"- {s}" for s in summary_lines]))

# --- Data (tables from JSON input) ---
# Table: Monthly Sales 2025
monthly_sales_rows = [
    ["2025-01-01", 119626.18999999885],
    ["2025-02-01", 181249.12999999718],
    ["2025-03-01", 162391.27999999782],
    ["2025-04-01", 122584.14999999863],
    ["2025-05-01", 110036.75999999886],
    ["2025-06-01", 138457.01999999848],
    ["2025-07-01", 101228.30999999943],
    ["2025-08-01", 90910.37999999947],
    ["2025-09-01", 18826.00999999998]
]

monthly_sales_columns = ["month", "total_sales"]

df_monthly = pd.DataFrame(monthly_sales_rows, columns=monthly_sales_columns)
# Parse month to datetime
df_monthly["month"] = pd.to_datetime(df_monthly["month"])  # dtype: datetime64[ns]

# Sort by month just in case
df_monthly = df_monthly.sort_values("month").reset_index(drop=True)

# Display table
st.subheader("Monthly Sales 2025")
st.dataframe(df_monthly.style.format({"total_sales": "${:,.2f}"}), height=300)

# Quick stats (highest/lowest months)
max_row = df_monthly.loc[df_monthly["total_sales"].idxmax()]
min_row = df_monthly.loc[df_monthly["total_sales"].idxmin()]

col1, col2, col3 = st.columns(3)
col1.metric("Peak month", max_row["month"].strftime("%B %Y"), f"${max_row['total_sales']:,.2f}")
col2.metric("Lowest month", min_row["month"].strftime("%B %Y"), f"${min_row['total_sales']:,.2f}")
col3.metric("Total (Jan-Sep)", "", f"${df_monthly['total_sales'].sum():,.2f}")

# --- Charts (Altair) ---
st.subheader("Sales Trend — Line Chart")

# Prepare data for Altair
# Altair handles pandas datetime types for temporal X encoding
chart = alt.Chart(df_monthly).mark_line(point=True, interpolate='monotone').encode(
    x=alt.X('month:T', title='Month'),
    y=alt.Y('total_sales:Q', title='Total Sales', axis=alt.Axis(format='$,') ),
    tooltip=[
        alt.Tooltip('month:T', title='Month', format='%Y-%m'),
        alt.Tooltip('total_sales:Q', title='Total Sales', format='$,.2f')
    ]
).properties(
    width=900,
    height=400
).interactive()

# Add an area under the line for emphasis
area = alt.Chart(df_monthly).mark_area(opacity=0.1, interpolate='monotone').encode(
    x='month:T',
    y='total_sales:Q'
)

combined = area + chart
st.altair_chart(combined, use_container_width=True)

# Optionally show the underlying data as CSV download
csv = df_monthly.to_csv(index=False)
st.download_button("Download monthly sales CSV", data=csv, file_name="monthly_sales_2025.csv", mime="text/csv")

# Echo / metadata from the JSON input (for reference)
with st.expander("Source & echo information"):
    st.write("Intent: trend")
    st.write({
        "used_tables": ["Haleon_Rewards_User_Performance_110925_SKUs"],
        "used_columns": ["Upload_Date", "Total Sales Amount"],
        "sql_present": True,
        "elapsed_seconds": 0.010482119
    })

# Footer
st.markdown("---")
st.markdown("Generated by AI report-to-Streamlit converter.")
