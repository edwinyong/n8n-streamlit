import streamlit as st
import pandas as pd
import altair as alt
from io import StringIO

# ---------------------------
# Data (from provided JSON)
# ---------------------------
TABLE_NAME = "Table"
COLUMNS = ["period", "registered_purchasers", "total_sales"]
ROWS = [
    ["2025 Q1", "4998", 463266.6000000094],
    ["2025 Q2", "3826", 371077.9300000016],
]

# Build DataFrame
df = pd.DataFrame(ROWS, columns=COLUMNS)
# Ensure correct dtypes
df["registered_purchasers"] = df["registered_purchasers"].astype(int)
df["total_sales"] = df["total_sales"].astype(float)

# ---------------------------
# Streamlit App
# ---------------------------
st.set_page_config(page_title="AI Report - Comparison Totals", layout="wide")

st.title("AI Report — Comparison Totals (2025 Q1 vs Q2)")

# Summary (from provided JSON summary list)
summary_lines = [
    "Registered purchasers decreased by 23.43% from Q1 (4,998) to Q2 (3,826) in 2025.",
    "Total sales dropped by 19.88% from Q1 (463,266.60) to Q2 (371,077.93) in 2025.",
]

st.subheader("Summary")
for s in summary_lines:
    st.markdown(f"- {s}")

st.markdown("---")

# Display original table
st.subheader(f"{TABLE_NAME}")
st.dataframe(df.style.format({
    "registered_purchasers": "{:,}",
    "total_sales": "${:,.2f}"
}), use_container_width=True)

# Provide CSV download
csv_buffer = StringIO()
df.to_csv(csv_buffer, index=False)
csv_bytes = csv_buffer.getvalue().encode('utf-8')
st.download_button("Download table as CSV", data=csv_bytes, file_name="table.csv", mime="text/csv")

st.markdown("---")

# ---------------------------
# Chart: Grouped bar (Altair)
# ---------------------------
st.subheader("Grouped Comparison Chart")
st.markdown("This grouped bar chart shows Registered Purchasers and Total Sales by period.\n\nNote: Total Sales are shown in thousands (K) on the chart to keep the scale comparable to Registered Purchasers.")

# Prepare data for grouped bar with scaling for total_sales
melted = df.melt(id_vars=["period"], value_vars=["registered_purchasers", "total_sales"],
                 var_name="metric", value_name="raw_value")

# Create a scaled plotting value so both series can appear together reasonably
# registered_purchasers -> plotted as-is
# total_sales -> plotted in thousands (divide by 1000)

def compute_scaled_value(row):
    if row["metric"] == "total_sales":
        return row["raw_value"] / 1000.0
    else:
        return float(row["raw_value"])

melted["value"] = melted.apply(compute_scaled_value, axis=1)

# Add display strings for tooltip
def format_display(row):
    if row["metric"] == "total_sales":
        return f"${row['raw_value']:,.2f}"
    else:
        return f"{int(row['raw_value']):,}"

melted["display"] = melted.apply(format_display, axis=1)

# Replace metric names with friendly labels
metric_friendly = {
    "registered_purchasers": "Registered Purchasers",
    "total_sales": "Total Sales"
}

melted["metric_label"] = melted["metric"].map(metric_friendly)

# Use Altair grouped bar with xOffset for grouping
chart = alt.Chart(melted).mark_bar().encode(
    x=alt.X('period:N', title='Period'),
    xOffset='metric_label:N',  # groups bars side-by-side
    y=alt.Y('value:Q', title='Value (Registered Purchasers and Total Sales in K)'),
    color=alt.Color('metric_label:N', title='Metric'),
    tooltip=[alt.Tooltip('period:N', title='Period'),
             alt.Tooltip('metric_label:N', title='Metric'),
             alt.Tooltip('display:N', title='Value')]
).properties(
    width=700,
    height=420,
    title='Registered Purchasers vs Total Sales (Total Sales shown in thousands)'
).configure_title(
    fontSize=16,
    anchor='start'
)

st.altair_chart(chart, use_container_width=True)

# Provide an alternate separate chart for Total Sales (absolute) for clarity
st.markdown("---")
st.subheader("Total Sales (Absolute) — Line & Points")
line = alt.Chart(df).transform_fold(
    fold=['total_sales'], as_=['metric', 'value']
).mark_line(point=True).encode(
    x=alt.X('period:N', title='Period'),
    y=alt.Y('value:Q', title='Total Sales (USD)', axis=alt.Axis(format='$,')).scale(domain=[0, None]),
    color=alt.value('#1f77b4'),
    tooltip=[alt.Tooltip('period:N', title='Period'), alt.Tooltip('total_sales:Q', title='Total Sales', format='$,.2f')]
).properties(width=700, height=360)

st.altair_chart(line, use_container_width=True)

# Echo of metadata (from provided JSON echo)
st.markdown("---")
with st.expander("Query metadata and echo (from input)"):
    st.markdown("**Intent:** comparison_totals")
    st.markdown("**Used tables:** `Haleon_Rewards_User_Performance_110925_SKUs`, `Haleon_Rewards_User_Performance_110925_user_list`")
    st.markdown("**Used columns:** Upload_Date, Total Sales Amount, comuserid, user_id")
    st.markdown("**SQL present:** Yes")
    st.markdown("**Elapsed (s):** 0.068185551")

st.markdown("---")
st.caption("Generated by AI Report App - repository: edwinyong/ai-report-app-20251001-0235")
